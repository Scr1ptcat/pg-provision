name: CI

on:
  push:
    branches: [ main, master ]
    tags: ['v*.*.*']
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

  unit:
    name: Unit tests (Ubuntu, py${{ matrix.python }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
        with:
           fetch-depth: 0
           fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      - name: Install test deps
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -U pytest build twine
      - name: Run pytest
        run: pytest -q
      - name: "Smoke: pgprovision --dry-run"
        run: |
          python -m pip install .
          pgprovision --dry-run
      - name: "Artifact test (importlib.resources)"
        run: |
          python - <<'PY'
          import os, sys
          from importlib.resources import files, as_file
          p = files('pgprovision').joinpath('_sh', 'provision.sh')
          with as_file(p) as f:
              print(f)
              sys.exit(0 if os.path.exists(f) else 1)
          PY

  rocky-smoke:
    name: Smoke (Rocky Linux 9)
    runs-on: ubuntu-latest
    container:
      image: rockylinux:9
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - name: Install git before checkout (enables full clone)
        run: |
          set -euxo pipefail
          dnf -y update || true
          dnf -y install git
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Install Python and tools
        run: |
          set -euxo pipefail
          dnf -y install python3 python3-pip sudo
          python3 -m pip install --upgrade pip
      - name: Install package
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION_FOR_PG_PROVISION: 0.0.0.dev${{ github.run_number }}+g${{ github.sha }}
        run: python3 -m pip install .
      - name: "Smoke: pgprovision --dry-run"
        run: pgprovision --dry-run
      - name: "Artifact test (importlib.resources)"
        run: |
          python3 - <<'PY'
          import os, sys
          from importlib.resources import files, as_file
          p = files('pgprovision').joinpath('_sh', 'provision.sh')
          with as_file(p) as f:
              print(f)
              sys.exit(0 if os.path.exists(f) else 1)
          PY
  build:
    name: Build & check sdists/wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Build dist
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
          python -m build
          twine check dist/*
      - name: Install wheel and smoke
        run: |
          python -m pip install dist/*.whl
          pgprovision --help
          pgprovision --dry-run
      - name: Uninstall wheel
        run: python -m pip uninstall -y pg-provision || true
      - name: Install sdist and smoke
        run: |
          python -m pip install dist/*.tar.gz
          pgprovision --help
          pgprovision --dry-run
      - name: Artifact test (importlib.resources, sdist)
        run: |
          python - <<'PY'
          import os, sys
          from importlib.resources import files, as_file
          p = files('pgprovision').joinpath('_sh', 'provision.sh')
          with as_file(p) as f:
              print(f)
              sys.exit(0 if os.path.exists(f) else 1)
          PY
  publish:
    name: Publish to PyPI (on tag)
    if: startsWith(github.ref, 'refs/tags/v')   # only when pushing a v* tag
    needs: [pre-commit, unit, rocky-smoke, build]  # gate on all the checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # required for PyPI Trusted Publishing (OIDC)

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0       # needed if you use setuptools_scm
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'   # choose your build interpreter

      - name: Build sdist/wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
